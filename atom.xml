<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Advanced</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liyunlog0621.github.io/"/>
  <updated>2019-01-03T06:07:51.764Z</updated>
  <id>https://liyunlog0621.github.io/</id>
  
  <author>
    <name>李云龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>8.Feign</title>
    <link href="https://liyunlog0621.github.io/2019/01/02/cloud8/"/>
    <id>https://liyunlog0621.github.io/2019/01/02/cloud8/</id>
    <published>2019-01-02T07:46:07.000Z</published>
    <updated>2019-01-03T06:07:51.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Feign的含义"><a href="#Feign的含义" class="headerlink" title="Feign的含义"></a>Feign的含义</h1><blockquote><p>Feign是一个声明式的WebService客户端，使用Feign主需要创建一个接口加上对应注解。<br>Fegin是一种声明式，模板化的Http客户端，在使用Feign可以使用http请求访问远程服务，类似于调用本地方法一样。</p></blockquote><a id="more"></a><h1 id="Feign的特性"><a href="#Feign的特性" class="headerlink" title="Feign的特性"></a>Feign的特性</h1><blockquote><ul><li>可插拔的注解支持。包含Feign注解和Jax-Rs注解</li><li>支持可拔插的Http编码器和解码器</li><li>支持Hystrix和FallBack</li><li>支持Ribbon的负载均衡</li><li>支持Http请求的响应的压缩</li></ul></blockquote><h1 id="Feign的工作原理"><a href="#Feign的工作原理" class="headerlink" title="Feign的工作原理"></a>Feign的工作原理</h1><blockquote><ul><li>在主程序增加 @EnableFeignClients 注解开启对FeignClient扫描加载处理。</li><li>当程序启动的时候，会进行包扫描。扫描所有的@FeignClinet是的注解的类，并将信息注入Spring IOC容器中。当定期的Feign接口的方法调用的时候，通过JOK的dialing的方式，来生成具体RequestTemplate。当生成代理时候，Fegin会每个接口方法创建一个RequestTemplate对象，该对象封装了Http请求需要的全部信息。如请求参数名。请求方法等信息都是在这个过程中确定的。</li><li>然后又RequestTemplate生成Request，然后把Request交个Client去处理，这里指的是Client可以是jDk原生的URLConnection，Apache的HttpClient，也可以是Okhttp，最后Client被封装到LoadBalanceClient类，这个类结合Ribbon负载均衡发起服务之间的调用</li></ul></blockquote><h1 id="FeignClient注解"><a href="#FeignClient注解" class="headerlink" title="FeignClient注解"></a>FeignClient注解</h1><table><thead><tr><th>名称</th><th style="text-align:right">作用</th></tr></thead><tbody><tr><td>name</td><td style="text-align:right">指定FeignClient的名称，如果项目使用Ribbon，name属性会作为微服务的名称，用于服务发现</td></tr><tr><td>url</td><td style="text-align:right">url一般用于调试，可以手动指定@FeignClient的调用地址</td></tr><tr><td>decode404</td><td style="text-align:right">当发生404错误的时候，如果该字段为true，会调用decoder进行解码，否则抛出FeignException</td></tr><tr><td>configuration</td><td style="text-align:right">Feign配置类，可以自定义Feign的Encode，Decoder，LogLevel,Contract</td></tr><tr><td>fallback</td><td style="text-align:right">定义容错处理类，当调用远程接口实在或者超时的时候，会调用相应的接口进行逻辑，fallback指定的类必须实现@FeignClient标记的接口</td></tr><tr><td>fallbackFactory</td><td style="text-align:right">工厂类，用于生成fallback类实例，通关这个属性我们可以实现每一个接口通用的容错逻辑，减少重复的代码</td></tr><tr><td>path</td><td style="text-align:right">定义当前的FeignClient的统一前缀</td></tr></tbody></table><h1 id="Fegin开启GZIP压缩"><a href="#Fegin开启GZIP压缩" class="headerlink" title="Fegin开启GZIP压缩"></a>Fegin开启GZIP压缩</h1><blockquote><p>提高通信效率</p></blockquote><h2 id="GZIP压缩的含义"><a href="#GZIP压缩的含义" class="headerlink" title="GZIP压缩的含义"></a>GZIP压缩的含义</h2><p><a href="https://blog.csdn.net/baidu_35407267/article/details/77141871" target="_blank" rel="noopener">https://blog.csdn.net/baidu_35407267/article/details/77141871</a></p><blockquote><p>情况很简单：文件越小，下载更快，用户感受更好。<br><img src="/images/cloud/7-4.png" alt="7-4.png"></p><ul><li>浏览器：嘿，给我来一个index.html，如果要有，给我来一个压缩版的可以吗 </li><li>服务器：容我找找……好，满足你，如果找到了给你压缩以下，gzip格式的哦 </li><li>服务器：yep，找到了，正在压缩，马上传给你。 </li><li>浏览器：太棒了，只有10kb，我来解压，并且渲染给用户。</li></ul></blockquote><blockquote><p>变化的部分在于浏览器和服务器，它成功的发送过去一个压缩文件。对于gzip压缩的要点有两点:</p><ul><li>浏览器发送一个请求头，告诉服务器接受压缩版本的文件（gzip和deflate是两种压缩算法）Accept-Encoding:gzip,deflate</li><li>如果文件压缩了,服务器返回一个头信息:Content-Encoding:gzip</li></ul></blockquote><h2 id="在配置文件增加配置"><a href="#在配置文件增加配置" class="headerlink" title="在配置文件增加配置"></a>在配置文件增加配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8011</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: feign-gzip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feign:</span><br><span class="line">  compression:</span><br><span class="line">    request:</span><br><span class="line">      enabled: <span class="keyword">true</span></span><br><span class="line">      mime-types: text/xml,application/xml,application/json # 配置压缩支持的MIME TYPE</span><br><span class="line">      min-request-size: 2048  # 配置压缩数据大小的下限</span><br><span class="line">    response:</span><br><span class="line">      enabled: true # 配置响应GZIP压缩</span><br></pre></td></tr></table></figure><h2 id="并没有体会到有什么作用。。。"><a href="#并没有体会到有什么作用。。。" class="headerlink" title="并没有体会到有什么作用。。。"></a>并没有体会到有什么作用。。。</h2><h1 id="属性文件配置Feign"><a href="#属性文件配置Feign" class="headerlink" title="属性文件配置Feign"></a>属性文件配置Feign</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">feign:</span><br><span class="line">  client:</span><br><span class="line">    config:</span><br><span class="line">      #需要配置的FeignName</span><br><span class="line">      feignName:</span><br><span class="line">        connectTimeout: 5000 # 连接超时时间</span><br><span class="line">        readTimeout: 5000 # 读超时时间设置</span><br><span class="line">        loggerLevel: full # 配置Feign的日志级别</span><br><span class="line">        erroerDecorder: com.example.SimpleErrorDecorder # Feign的错误解码器</span><br><span class="line">        retryer: com.example.SimpleRetryer #配置充实</span><br><span class="line">        requestInterceptors: #配置拦截器</span><br><span class="line">          -com.example.FooRequestInerceptor</span><br><span class="line">          -com.example.BarRequestInterceptor</span><br><span class="line">        decode404: flase</span><br><span class="line">        encoder: com.example.SimpleEncoder #Fegin的编码器</span><br><span class="line">        decoder: com.example.SimpleDecoder # Feign的解码器</span><br><span class="line">        contract: com.example.SimpleContract # Feign的contract配置</span><br></pre></td></tr></table></figure><h1 id="Feign-开启日志"><a href="#Feign-开启日志" class="headerlink" title="Feign 开启日志"></a>Feign 开启日志</h1><blockquote><p>Feign为每一个FeginClient都提供了一个feign.Logger实例，可以在配置中开启日志<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    cn.springcloud.book.feign.service.HelloFeignService: debug</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>或者创建带有@Configuration注解的类，去配置日志Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Level的具体级别如下：</span></span><br><span class="line"><span class="comment">     * NONE：不记录任何信息</span></span><br><span class="line"><span class="comment">     * BASIC：仅记录请求方法</span></span><br><span class="line"><span class="comment">     * HEADERS：处理记录 BASIC级别的信息外，还会记录请求和响应的头信息</span></span><br><span class="line"><span class="comment">     * FULL：记录所有请求与响应的明细,包括头信息,请求体,元数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="Feign初试"><a href="#Feign初试" class="headerlink" title="Feign初试"></a>Feign初试</h1><blockquote><p>增加prom文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--springcloud openFeign的starter的依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt;  增加Config文件</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignclient.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName HelloFeignServiceConfig</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 下午 4:56</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Level的具体级别如下：</span></span><br><span class="line"><span class="comment">     * NONE：不记录任何信息</span></span><br><span class="line"><span class="comment">     * BASIC：仅记录请求方法</span></span><br><span class="line"><span class="comment">     * HEADERS：处理记录 BASIC级别的信息外，还会记录请求和响应的头信息</span></span><br><span class="line"><span class="comment">     * FULL：记录所有请求与响应的明细,包括头信息,请求体,元数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>增加Service接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignclient.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudfeignclient.config.HelloFeignServiceConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName HelloFeignService</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 下午 4:55</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"client"</span>, url = <span class="string">"https://api.github.com"</span>, configuration = HelloFeignServiceConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloFeignService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@FeignClient</span> 注解手动指定url=https://api.github.com 该调用地址会根据传入字符串搜索GitHub上相关的仓库信息</span></span><br><span class="line"><span class="comment">     * HelloFeignService 会根据指定的Url和<span class="doctag">@ResuqetsMapping</span>对应的方法，转换成最终的请求地址</span></span><br><span class="line"><span class="comment">     * eg：https://api.github.com/search/repositories?q=spring-cloud-dubbo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/repositories"</span>, method = RequestMethod.GET)</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; searchRepo(<span class="meta">@RequestParam</span>(<span class="string">"q"</span>) String queryStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignclient.controller;</span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudfeignclient.service.HelloFeignService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName HelloFeignController</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 下午 4:56</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFeignController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloFeignService helloFeignService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务消费者对位提供的服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/search/github"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; searchGithubRepoByStr(<span class="meta">@RequestParam</span>(<span class="string">"str"</span>) String queryStr) &#123;</span><br><span class="line">        <span class="keyword">return</span> helloFeignService.searchRepo(queryStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动类增加@EnableFeignClients注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudFeignClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudFeignClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行成功<br><img src="/images/cloud/7-3.png" alt="7-3.png"></p></blockquote><h1 id="Fegin实战记录"><a href="#Fegin实战记录" class="headerlink" title="Fegin实战记录"></a>Fegin实战记录</h1><h2 id="默认Client的替换"><a href="#默认Client的替换" class="headerlink" title="默认Client的替换"></a>默认Client的替换</h2><blockquote><p>Feign默认使用JDK原生的URLConnection发送Http请求，没有连接池，但是对每个地址会保持长连接。利用了HTTP的persistence connection（持久连接）。可以使用Apache的HttpClient通过设置连接池，超时时间等对服务之间进行调用调优。</p></blockquote><h3 id="HttpClient替换Client"><a href="#HttpClient替换Client" class="headerlink" title="HttpClient替换Client"></a>HttpClient替换Client</h3><blockquote><p>在porm文件中间配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--springcloud openFeign的starter的依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--使用Apache HttpClient替换Feign原生httpclient--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.netflix.feign&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;8.17.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在application文件中配置上Fgign启动的时候加载http Clien替换默认的Client<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8010</span></span><br><span class="line">spring.application.name=feign-httpclient</span><br><span class="line">feign.httpclient.enabled=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行成功<br><img src="/images/cloud/7-5.png" alt="7-5.png"></p></blockquote><h3 id="OkHttp替换Client"><a href="#OkHttp替换Client" class="headerlink" title="OkHttp替换Client"></a>OkHttp替换Client</h3><blockquote><p>prom文件增加配置 （不知道为什么只引入feign-okhttp之后并不能用，后期引用了com.squareup.okhttp3的jar包？？？）</p><ul><li>支持SPDY,可以合并多个到同一主机的请求</li><li>使用连接池技术减少请求的延迟（如果SPDY是可用的话）</li><li>使用GZIP压缩减少传出的数据量</li><li>缓存响应避免重复的网络请求<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--springcloud openFeign的starter的依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;feign-okhttp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;okhttp&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.11.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><p>开始OkHttp 为Feign默认的Client<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">8011</span></span><br><span class="line">spring.application.name=feign-okhttp</span><br><span class="line">feign.httpclient.enabled=<span class="keyword">true</span></span><br><span class="line">feign.okhttp.enabled=<span class="keyword">true</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>创建核心功能执行者 okHttpClient 如下只是常用配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignokhttpreplace.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Feign;</span><br><span class="line"><span class="keyword">import</span> okhttp3.ConnectionPool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Feign.class)</span><br><span class="line"><span class="meta">@AutoConfigureBefore</span>(FeignAutoConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignOkHttpClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> okhttp3.<span class="function">OkHttpClient <span class="title">okHttpClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> okhttp3.OkHttpClient.Builder()</span><br><span class="line">                <span class="comment">//设置连接超时</span></span><br><span class="line">                .connectTimeout(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//设置读超时</span></span><br><span class="line">                .readTimeout(<span class="number">60</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//设置写超时</span></span><br><span class="line">                .writeTimeout(<span class="number">60</span>,TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">//是否自动重连</span></span><br><span class="line">                .retryOnConnectionFailure(<span class="keyword">true</span>)</span><br><span class="line">                .connectionPool(<span class="keyword">new</span> ConnectionPool())</span><br><span class="line">                <span class="comment">//构建OkHttpClient对象</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在接口引入配置问津<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"github-client"</span>, url = <span class="string">"https://api.github.com"</span>, configuration = FeignOkHttpClient.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloFeignService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * content: &#123;"message":"Validation Failed","errors":[&#123;"resource":"Search","field":"q","code":"missing"&#125;],</span></span><br><span class="line"><span class="comment">     * "documentation_url":"https://developer.github.com/v3/search"&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> queryStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/search/repositories"</span>, method = RequestMethod.GET)</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; searchRepo(<span class="meta">@RequestParam</span>(<span class="string">"q"</span>) String queryStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Post和Get的多参数传递"><a href="#Post和Get的多参数传递" class="headerlink" title="Post和Get的多参数传递"></a>Post和Get的多参数传递</h2><blockquote><p>Feign不支持get方法直接绑定POJO</p><ul><li>拆分POJO对象为一个一个的属性放在方法参数里</li><li>把方法参数变成Map传递</li><li>使用@RequestBody，但是违反了Restful规范<br>通过实现Feign的RequestInterceptor中的apply方法进行统一拦截转换处理Feign中的Get方法多参数传递的问题</li></ul></blockquote><table><thead><tr><th>工程名</th><th style="text-align:right">端口</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>spring-cloud-many-feign-eureka-server</td><td style="text-align:right">8761</td><td style="text-align:right">注册中心</td></tr><tr><td>spring-cloud-many-feign-consumer</td><td style="text-align:right">8011</td><td style="text-align:right">服务消费者</td></tr><tr><td>spring-cloud-many-feign-provider</td><td style="text-align:right">8012</td><td style="text-align:right">服务提供者</td></tr></tbody></table><h3 id="创建注册中心（略过。。。）"><a href="#创建注册中心（略过。。。）" class="headerlink" title="创建注册中心（略过。。。）"></a>创建注册中心（略过。。。）</h3><h3 id="配置消费者"><a href="#配置消费者" class="headerlink" title="配置消费者"></a>配置消费者</h3><p> 1.集成swagger2<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName Swagger2Config</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:28</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors</span><br><span class="line">                        .basePackage(<span class="string">"com.lyl.springcloudmanyfeignconsumer.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"Feign多参数传递问题"</span>).description(<span class="string">"Feign多参数传递问题"</span>)</span><br><span class="line">                .contact(<span class="string">"Software_King@qq.com"</span>).version(<span class="string">"1.0"</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName ApplicationExceptionAdapter</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:22</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationExceptionAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>配置核心Interceptor<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName FeignRequestInterceptor</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:29</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String MEONTH = <span class="string">"GET"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// feign 不支持 GET 方法传 POJO, json body转query</span></span><br><span class="line">        <span class="keyword">if</span> (requestTemplate.method().equals(MEONTH) &amp;&amp; requestTemplate.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JsonNode jsonNode = objectMapper.readTree(requestTemplate.body());</span><br><span class="line">                requestTemplate.body(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Collection&lt;String&gt;&gt; queries = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                buildQuery(jsonNode, <span class="string">""</span>, queries);</span><br><span class="line">                requestTemplate.queries(queries);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">//提示:根据实践项目情况处理此处异常，这里不做扩展。</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildQuery</span><span class="params">(JsonNode jsonNode, String path, Map&lt;String, Collection&lt;String&gt;&gt; queries)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//子节点</span></span><br><span class="line">        <span class="keyword">if</span> (!jsonNode.isContainerNode()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (jsonNode.isNull()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Collection&lt;String&gt; values = queries.get(path);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == values) &#123;</span><br><span class="line">                values = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                queries.put(path, values);</span><br><span class="line">            &#125;</span><br><span class="line">            values.add(jsonNode.asText());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数组节点</span></span><br><span class="line">        <span class="keyword">if</span> (jsonNode.isArray()) &#123;</span><br><span class="line">            Iterator&lt;JsonNode&gt; it = jsonNode.elements();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                buildQuery(it.next(), path, queries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Iterator&lt;Map.Entry&lt;String, JsonNode&gt;&gt; it = jsonNode.fields();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                Map.Entry&lt;String, JsonNode&gt; entry = it.next();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(path)) &#123;</span><br><span class="line">                    buildQuery(entry.getValue(), path + <span class="string">"."</span> + entry.getKey(), queries);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 根节点</span></span><br><span class="line">                    buildQuery(entry.getValue(), entry.getKey(), queries);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName FeignTokenInterceptor</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:29</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> * Feign统一的Token拦截器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTokenInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==getHttpServletRequest())&#123;</span><br><span class="line">            <span class="comment">//此处省略日志记录</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将获取Token对应的值往下面传</span></span><br><span class="line">        requestTemplate.header(<span class="string">"oauthToken"</span>, getHeaders(getHttpServletRequest()).get(<span class="string">"oauthToken"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpServletRequest <span class="title">getHttpServletRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; enumeration = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">            String keys = enumeration.nextElement();</span><br><span class="line">            String value = request.getHeader(keys);</span><br><span class="line">            map.put(keys, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>3.创建service接口 注意：@FeignClient(name = “provider”) 名字写上服务提供者在注册中心注册的名字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudmanyfeignconsumer.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName UserFeignService</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:41</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/add"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/update"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function">String <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>配置启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudManyFeignProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudManyFeignProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4 创建Controller接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudmanyfeignconsumer.model.User;</span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudmanyfeignconsumer.service.UserFeignService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName UserController</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:44</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserFeignService userFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于演示Feign的Get请求多参数传递</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/add"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">( @RequestBody @ApiParam(name=<span class="string">"用户"</span>,value=<span class="string">"传入json格式"</span>,required=<span class="keyword">true</span>)</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userFeignService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于演示Feign的Post请求多参数传递</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">( @RequestBody @ApiParam(name=<span class="string">"用户"</span>,value=<span class="string">"传入json格式"</span>,required=<span class="keyword">true</span>)</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userFeignService.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置服务提供者"><a href="#配置服务提供者" class="headerlink" title="配置服务提供者"></a>配置服务提供者</h3><blockquote><p>增加接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignprovider.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudmanyfeignprovider.model.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName UserController</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:54</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String token = request.getHeader(<span class="string">"oauthToken"</span>);</span><br><span class="line">        <span class="keyword">return</span> token + <span class="string">"hello,已经添加成功"</span> + user.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,已经修改成功"</span> + user.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>配置启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignprovider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudManyFeignProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudManyFeignProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="先启动注册中心-再启动服务提供者-在启动服务消费者"><a href="#先启动注册中心-再启动服务提供者-在启动服务消费者" class="headerlink" title="先启动注册中心 再启动服务提供者  在启动服务消费者"></a>先启动注册中心 再启动服务提供者  在启动服务消费者</h3><blockquote><p>测试发现 提供者并没有获取到token<br><img src="/images/cloud/7-6.png" alt="7-6.png"></p></blockquote><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><table><thead><tr><th>工程名</th><th style="text-align:right">端口</th><th style="text-align:right">描述</th></tr></thead><tbody><tr><td>spring-cloud-feign-upload-consumer</td><td style="text-align:right">8761</td><td style="text-align:right">服务消费者</td></tr><tr><td>spring-cloud-feign-upload-file-server</td><td style="text-align:right">8011</td><td style="text-align:right">文件服务提供者</td></tr><tr><td>spring-cloud-feign-upload-provider</td><td style="text-align:right">8012</td><td style="text-align:right">服务提供者</td></tr><tr><td>spring-cloud-feign-upload-server</td><td style="text-align:right">8761</td><td style="text-align:right">注册中心</td></tr></tbody></table><blockquote><p>创建FileUploadFeignService<br>com.lyl.springcloudfeignuploadconsumer.service.FileUploadFeignService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignuploadconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lyl.springcloudfeignuploadconsumer.config.FeignMultipartSupportConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestPart;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName FileUploadFeignService</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 11:27</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"file-server"</span>, configuration = FeignMultipartSupportConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileUploadFeignService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 1.produces,consumes必填</span></span><br><span class="line"><span class="comment">     * 2.注意区分<span class="doctag">@RequestPart</span>和RequestParam，不要将</span></span><br><span class="line"><span class="comment">     * @ RequestPart(value = "file") 写成<span class="doctag">@RequestParam</span>(value = "file")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, value = <span class="string">"/uploadFile/server"</span>,</span><br><span class="line">            produces = &#123;MediaType.APPLICATION_JSON_UTF8_VALUE&#125;,</span><br><span class="line">            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function">String <span class="title">fileUpload</span><span class="params">(@RequestPart(value = <span class="string">"file"</span>)</span> MultipartFile file)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>编写文件上传的服务端<br>com.lyl.springcloudfeignuploadfileserver.controller.FeignUploadController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignuploadfileserver.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName FeignUploadController</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 11:26</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignUploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/uploadFile/server"</span>, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUploadServer</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.getOriginalFilename();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>查看接口运行结果</p></blockquote><p><img src="/images/cloud/7-7.png" alt="7-7.png"></p><h2 id="返回图片流处理方式"><a href="#返回图片流处理方式" class="headerlink" title="返回图片流处理方式"></a>返回图片流处理方式</h2><blockquote><p>在使用Feign的过程中可以将流转为字节数据传递，但是因为controller层返回的不能直接返回byte，隐藏需要将返回值修改为resonse<br>com.lyl.springcloudfeignuploadconsumer.service.UserFeignService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudfeignuploadconsumer.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Response;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName UserFeignService</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 11:08</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/feign"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function">String <span class="title">helloFeign</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成图片验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imagekey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"createImagesCode"</span>)</span><br><span class="line">    <span class="function">Response <span class="title">createImageCode</span><span class="params">(@RequestParam(<span class="string">"imagekey"</span>)</span> String imagekey)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="调用传递Token-并未实现"><a href="#调用传递Token-并未实现" class="headerlink" title="调用传递Token(并未实现)"></a>调用传递<code>Token</code>(并未实现)</h2><blockquote><p>com.lyl.springcloudmanyfeignconsumer.interceptor.FeignTokenInterceptor<br>当消费者去调用服务提供者的时候token不应该被提供者获取到吗？？？ token并获取不到<br>原因：oauthtoken必须小写才可以<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudmanyfeignconsumer.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.RequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> feign.RequestTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName FeignTokenInterceptor</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 9:29</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> * Feign统一的Token拦截器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTokenInterceptor</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == getHttpServletRequest()) &#123;</span><br><span class="line">            <span class="comment">//此处省略日志记录</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将获取Token对应的值往下面传</span></span><br><span class="line">        requestTemplate.header(<span class="string">"oauthtoken"</span>, getHeaders(getHttpServletRequest()).get(<span class="string">"oauthtoken"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HttpServletRequest <span class="title">getHttpServletRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Enumeration&lt;String&gt; enumeration = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class="line">            String keys = enumeration.nextElement();</span><br><span class="line">            String value = request.getHeader(keys);</span><br><span class="line">            map.put(keys, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>服务提供者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String TOKEN = <span class="string">"oauthtoken"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String token = request.getHeader(TOKEN);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"token:"</span> + token + <span class="string">"添加的用户名称："</span> + user.getName();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/images/cloud/7-8.png" alt="7-8.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Feign的含义&quot;&gt;&lt;a href=&quot;#Feign的含义&quot; class=&quot;headerlink&quot; title=&quot;Feign的含义&quot;&gt;&lt;/a&gt;Feign的含义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Feign是一个声明式的WebService客户端，使用Feign主需要创建一个接口加上对应注解。&lt;br&gt;Fegin是一种声明式，模板化的Http客户端，在使用Feign可以使用http请求访问远程服务，类似于调用本地方法一样。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="-springcloud" scheme="https://liyunlog0621.github.io/categories/springcloud/"/>
    
    
      <category term="-springcloud" scheme="https://liyunlog0621.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>7.Ribbon</title>
    <link href="https://liyunlog0621.github.io/2019/01/02/cloud7/"/>
    <id>https://liyunlog0621.github.io/2019/01/02/cloud7/</id>
    <published>2019-01-02T02:10:36.000Z</published>
    <updated>2019-01-03T00:54:29.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ribbon的概念"><a href="#Ribbon的概念" class="headerlink" title="Ribbon的概念"></a>Ribbon的概念</h1><p>  Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端的负载均衡算法。Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等，简单的说。Ribbon是一个客户端的负载均衡器。我们可以在配置文件中列出Load Balancer后面的机器，Ribbon会自动的帮助你基于某种规则（简单轮询，随机连接等）去连接这些机器，可以使用Ribbon是实现自定义的负载均衡算法，</p><a id="more"></a><h1 id="Ribbon工作步骤："><a href="#Ribbon工作步骤：" class="headerlink" title="Ribbon工作步骤："></a>Ribbon工作步骤：</h1><p>   Ribbon工作的时候分两步：</p><blockquote><ul><li>第一步选择Eureka Server ，它优先选择在同一个zone而且负载较少的Server</li><li>第二步：根据用户指定的策略，在从server取到服务注册列表选择一个地址。</li><li>轮询round robin，随机Random，根据响应时间加权等。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解决RestTemplate 找不到原因 应该吧restTemplate注册到SpringBoot容器中。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@LoadBalanced</span> 能够是让RestTemplate在请求的时候拥有客户端负载均衡的能力</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@LoadBalanced</span></span><br><span class="line">   <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><table><thead><tr><th>策略类</th><th style="text-align:center">命名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>RandomRule</td><td style="text-align:center">随机策略</td><td style="text-align:center">随机选择Server</td></tr><tr><td>RoundRobinRule</td><td style="text-align:center">轮询策略</td><td style="text-align:center">按照顺序循环选择</td></tr><tr><td>RetryRule</td><td style="text-align:center">重试策略</td><td style="text-align:center">在一个配置时间段内选择server不成功,则一直尝试选择一个可用的server</td></tr><tr><td>BestAvailabelRule</td><td style="text-align:center">最低并发策略</td><td style="text-align:center">逐个考察server，如果server断路器打开，则忽略，在选择其中并发连接最低的server</td></tr><tr><td>AvailabilityFilteringRule</td><td style="text-align:center">可用过滤策略</td><td style="text-align:center">过滤掉一直连接失败并被标记位circuit tripped的server，过滤掉那些高并发连接的server</td></tr><tr><td>ResponseTimeWeightedRule</td><td style="text-align:center">响应时间加权策略</td><td style="text-align:center">根据server的响应时间分配权重。响应时间越长，权重越低,被选择到的概率就越低。</td></tr><tr><td>ZoneAvoidanceRule</td><td style="text-align:center">区域权衡策略</td><td style="text-align:center">综合判断server在区域的性能和server的可用性轮询选择server，并且判定一个AwsZone的运行性能是否可用，提出不可用的zone中所得的server</td></tr></tbody></table><h1 id="Ribbon配置"><a href="#Ribbon配置" class="headerlink" title="Ribbon配置"></a>Ribbon配置</h1><h2 id="随机机制"><a href="#随机机制" class="headerlink" title="随机机制"></a>随机机制</h2><blockquote><p>在消费者Conifg文件中增加配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName TestConfiguration</span></span><br><span class="line"><span class="comment"> * Author liyunlong</span></span><br><span class="line"><span class="comment"> * Data 上午 11:48</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IClientConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//随机算法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在配置文件增加<br>@RibbonClient(name = “member”, configuration = TestConfiguration.class) member为注册到注册中心的服务名称<br>若是多个服务<br>@RuvvibClients(valus={<br>@RibbonClient(name = “member”, configuration = TestConfiguration.class)<br>@RibbonClient(name = “member2”, configuration = TestConfiguration.class)<br>})<br><code>`</code> java<br>package com.lyl.springcloudeurekaorder;</p></blockquote><p>import config.TestConfiguration;<br>import org.springframework.boot.SpringApplication;<br>import org.springframework.boot.autoconfigure.SpringBootApplication;<br>import org.springframework.cloud.client.loadbalancer.LoadBalanced;<br>import org.springframework.cloud.netflix.eureka.EnableEurekaClient;<br>import org.springframework.cloud.netflix.ribbon.RibbonClient;<br>import org.springframework.context.annotation.Bean;<br>import org.springframework.web.client.RestTemplate;</p><p>@SpringBootApplication<br>@EnableEurekaClient<br>@RibbonClient(name = “member”, configuration = TestConfiguration.class)<br>public class SpringCloudEurekaOrderApplication {</p><pre><code>public static void main(String[] args) {    SpringApplication.run(SpringCloudEurekaOrderApplication.class, args);    //如果使用rest方式以别名的方式进行调用脸ribbon负载均衡器 @LoadBalanced}/** * 解决RestTemplate 找不到原因 应该吧restTemplate注册到SpringBoot容器中。 * * @LoadBalanced 能够是让RestTemplate在请求的时候拥有客户端负载均衡的能力 */@Bean</code></pre><p>//    @LoadBalanced<br>    RestTemplate restTemplate() {<br>        return new RestTemplate();<br>    }</p><p>}<br><code>`</code> </p><blockquote><p>同时启动三个服务端  一个消费者  分别调用 呈随机<br><img src="/images/cloud/7-2.png" alt="7-2.png"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Ribbon的概念&quot;&gt;&lt;a href=&quot;#Ribbon的概念&quot; class=&quot;headerlink&quot; title=&quot;Ribbon的概念&quot;&gt;&lt;/a&gt;Ribbon的概念&lt;/h1&gt;&lt;p&gt;  Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端的负载均衡算法。Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等，简单的说。Ribbon是一个客户端的负载均衡器。我们可以在配置文件中列出Load Balancer后面的机器，Ribbon会自动的帮助你基于某种规则（简单轮询，随机连接等）去连接这些机器，可以使用Ribbon是实现自定义的负载均衡算法，&lt;/p&gt;
    
    </summary>
    
      <category term="-springCloud" scheme="https://liyunlog0621.github.io/categories/springCloud/"/>
    
    
      <category term="-springCloud" scheme="https://liyunlog0621.github.io/tags/springCloud/"/>
    
  </entry>
  
  <entry>
    <title>6.Eureka2.0集群搭建以及服务调用</title>
    <link href="https://liyunlog0621.github.io/2018/12/29/cloud6/"/>
    <id>https://liyunlog0621.github.io/2018/12/29/cloud6/</id>
    <published>2018-12-29T07:24:47.000Z</published>
    <updated>2019-01-02T14:26:59.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>微服务核心：核心在于服务治理-注册中心<br>搭建erueka集群环境，至少需要2台以上。eureka搭建集群原理是使用相互注册原理，形成一组相互祖册的注册中心。<br>从而实现数据相互的同步。从而可以达到高可用</p></blockquote><a id="more"></a><h2 id="第二台注册地址"><a href="#第二台注册地址" class="headerlink" title="第二台注册地址"></a>第二台注册地址</h2><blockquote><p>注意1： spring.applicataion.name 需要保持注册中心一直<br>注意2：eureka.client.service-url.defaultZone= 需要将端口需要另外注册中心端口上，追加的话继续向后面拼接即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8100</span></span><br><span class="line">###定义服务名称</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: eureka</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: <span class="number">127.0</span>.0.1</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:9100/eureka/</span></span><br><span class="line">    ### 因为自己是注册中心，是否需要将自己注册给自己的注册中心（集群的时候是需要为true）</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    ### 因为自己是注册中心，不需要检索服务信息</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="第二台注册地址-1"><a href="#第二台注册地址-1" class="headerlink" title="第二台注册地址"></a>第二台注册地址</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port=<span class="number">9100</span></span><br><span class="line">spring.application.name=eureka</span><br><span class="line">eureka.instance.hostname=<span class="number">127.0</span>.0.1</span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8100/eureka/</span></span><br><span class="line">eureka.client.register-with-eureka=<span class="keyword">true</span></span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>运行可查看注册中心已经注册<br><img src="/images/cloud/6-1.png" alt="6-1.png"><br><img src="/images/cloud/6-2.png" alt="6-2.png"></p></blockquote><h1 id="客户端接口注入到注册中心"><a href="#客户端接口注入到注册中心" class="headerlink" title="客户端接口注入到注册中心"></a>客户端接口注入到注册中心</h1><p>在eureka上写入注册到多个注册中心即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###会员项目的端口号</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8000</span></span><br><span class="line">### 服务的别名-服务注册到注册中心的名称</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: member</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      ### 当前会员服务注册到Eureka服务</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8100/eureka,http://localhost:9100/eureka/</span></span><br><span class="line">      ### 需要将我的服务注册到Eureka 上</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    ###需要检索服务</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###订单项目的端口号</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8010</span></span><br><span class="line">### 服务的别名-服务注册到注册中心的名称</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: order</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      ### 当前订单服务注册到Eureka服务</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8100/eureka , http://localhost:9100/eureka/</span></span><br><span class="line">      ### 需要将我的服务注册到Eureka 上</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    ###需要检索服务</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><blockquote><p>运行可查看服务已经注册<br><img src="/images/cloud/6-3.png" alt="6-3.png"><br><img src="/images/cloud/6-4.png" alt="6-4.png"></p></blockquote><blockquote><p>只会保证一台注册中心有对应服务信息，当一台注册中心挂掉之后，另外一台就会出现</p></blockquote><h1 id="eureak-自我保护机制"><a href="#eureak-自我保护机制" class="headerlink" title="eureak 自我保护机制"></a>eureak 自我保护机制</h1><blockquote><ul><li>EurekaClient(注册客户端)</li><li>EurekaServer (注册中心服务端) </li></ul></blockquote><p>为什么会产生Eureka自我保护机制</p><blockquote><p>自我保护机制：默认情况下EurekaClient定时想EurekaServer端发送心跳包，如果EurekaServer端在一定的时间内没有收到心跳包，便会直接剔除该服务。(默认90秒时间)，但是在短时间内丢失了大量的服务实例心跳，这时候EurekaServer会开启自我保护机制，不会剔除该服务（为了防止EurekaClient是可以访问的，只是暂时无法以Eureka网络访问不通）。防止误删。<br>为了防止eurekaClient可以正常运行，但是与EurekaServer网络不通的情况下，<br>EurekaServer不会将EurekaClient服务剔除</p></blockquote><h1 id="开启-关闭-自我保护机制"><a href="#开启-关闭-自我保护机制" class="headerlink" title="开启/关闭 自我保护机制"></a>开启/关闭 自我保护机制</h1><blockquote><ul><li>本地环境：禁止开启自我保护机制</li><li>生产环境：开始自我保护机制</li></ul></blockquote><blockquote><p>在server服务中增加如下配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#测试时候关闭自我保护机制，保证不可用服务及时剔除</span><br><span class="line">eureka.server.enable-self-preservation=<span class="keyword">true</span></span><br><span class="line">eureka.server.eviction-interval-timer-in-ms=<span class="number">2000</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在client配置心跳检测时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#心跳检测与续约时间</span><br><span class="line">instance:</span><br><span class="line">  #Eureka客户端呢想服务器发送心跳的时间间隔，单位为秒(客户端告诉服务端自己按照该规则)</span><br><span class="line">  lease-renewal-interval-in-seconds: <span class="number">1</span></span><br><span class="line">  #Eureka 服务端在收到最后一次心跳之后等待的时间上线，单位为1秒，超过则剔除（客户端告诉服务端按照此规则）</span><br><span class="line">  lease-expiration-duration-in-seconds: <span class="number">2</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;微服务核心：核心在于服务治理-注册中心&lt;br&gt;搭建erueka集群环境，至少需要2台以上。eureka搭建集群原理是使用相互注册原理，形成一组相互祖册的注册中心。&lt;br&gt;从而实现数据相互的同步。从而可以达到高可用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>5.@LoadBalanced实现本地负载均衡</title>
    <link href="https://liyunlog0621.github.io/2018/12/29/cloud5/"/>
    <id>https://liyunlog0621.github.io/2018/12/29/cloud5/</id>
    <published>2018-12-29T07:24:01.000Z</published>
    <updated>2018-12-29T09:02:53.163Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>@LoadBalanced 能够让RestTemplate在请求的时候拥有客户端负载均衡的能力<br>ribbon 本地负载均衡</p></blockquote><a id="more"></a><blockquote><p>String result = restTemplate.getForObject(“<a href="http://127.0.0.1:8000/getMember&quot;" target="_blank" rel="noopener">http://127.0.0.1:8000/getMember&quot;</a>, String.class);<br>直接使用ip地址调用接口是错误，应该使用服务别名去注册中心获取对象的服务调用地址。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应该通过服务名调用服务</span></span><br><span class="line"><span class="comment"> * ### 服务的别名-服务注册到注册中心的名称</span></span><br><span class="line"><span class="comment"> * spring:</span></span><br><span class="line"><span class="comment"> *   application:</span></span><br><span class="line"><span class="comment"> *     name: member</span></span><br><span class="line"><span class="comment"> *     使用别名去注册中心获取对应的服务调用地址。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//<span class="doctag">TODO:</span>多参数调用服务如何实现？</span></span><br><span class="line">String url = <span class="string">"http://member/getMember"</span>;</span><br><span class="line">String forObject = restTemplate.getForObject(url, String.class);</span><br><span class="line"><span class="keyword">return</span> forObject;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><blockquote><p>调用<a href="http://yh-20161128lobl:8001/getOrder" target="_blank" rel="noopener">http://yh-20161128lobl:8001/getOrder</a></p><p>发现报错：java.net.UnknownHostException: member 解析不了member地址<br>需要在SpringBoot启动容器中 加上 @LoadBalanced注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaOrderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaOrderApplication.class, args);</span><br><span class="line">        <span class="comment">//如果使用rest方式以别名的方式进行调用脸ribbon负载均衡器 @LoadBalanced</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决RestTemplate 找不到原因 应该吧restTemplate注册到SpringBoot容器中。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@LoadBalanced</span> 能够是让RestTemplate在请求的时候拥有客户端负载均衡的能力</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="ribbon负载均衡-3-zookeeper实现动态负载均衡原理"><a href="#ribbon负载均衡-3-zookeeper实现动态负载均衡原理" class="headerlink" title="ribbon负载均衡(3.zookeeper实现动态负载均衡原理)"></a>ribbon负载均衡(3.zookeeper实现动态负载均衡原理)</h1><!--more--><blockquote><p>在启动中配置多个SpringBoot启动类：</p></blockquote><p><img src="/images/cloud/cloud5-1.png" alt="cloud5-1.png"></p><blockquote><p>在启动中可见已经启动多个服务</p></blockquote><p><img src="/images/cloud/cloud5-2.png" alt="cloud5-2.png"></p><blockquote><p>在Eureka中可见多个Member服务已经启动</p></blockquote><p><img src="/images/cloud/cloud5-3.png" alt="cloud5-3.png"></p><blockquote><p>调用消费者接口：<a href="http://yh-20161128lobl:8001/getOrder" target="_blank" rel="noopener">http://yh-20161128lobl:8001/getOrder</a><br>this is member 我是会员服务！！！8000<br>this is member 我是会员服务！！！8010<br>this is member 我是会员服务！！！8011</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;@LoadBalanced 能够让RestTemplate在请求的时候拥有客户端负载均衡的能力&lt;br&gt;ribbon 本地负载均衡&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>4.搭建Eureka服务消费者</title>
    <link href="https://liyunlog0621.github.io/2018/12/29/cloud4/"/>
    <id>https://liyunlog0621.github.io/2018/12/29/cloud4/</id>
    <published>2018-12-29T07:07:19.000Z</published>
    <updated>2018-12-29T08:24:25.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消费者（使用RestTemplate调用）"><a href="#消费者（使用RestTemplate调用）" class="headerlink" title="消费者（使用RestTemplate调用）"></a>消费者（使用RestTemplate调用）</h1><p>Eureka服务消费者<br><a id="more"></a></p><h2 id="第一步：-集成porm文件"><a href="#第一步：-集成porm文件" class="headerlink" title="第一步： 集成porm文件"></a>第一步： 集成porm文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入wab依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--引入eureka客户端依赖--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="第二步：-配置yml文件"><a href="#第二步：-配置yml文件" class="headerlink" title="第二步： 配置yml文件"></a>第二步： 配置yml文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###会员项目的端口号</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8000</span></span><br><span class="line">### 服务的别名-服务注册到注册中心的名称</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: member</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      ### 当前会员服务注册到Eureka服务</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8100/eureka</span></span><br><span class="line">      ### 需要将我的服务注册到Eureka 上</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    ###需要检索服务</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="第三步：调用服务接口"><a href="#第三步：调用服务接口" class="headerlink" title="第三步：调用服务接口"></a>第三步：调用服务接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudeurekaorder.com.lyl.api.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName OrderController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liyunlong</span></span><br><span class="line"><span class="comment"> * Data 下午 2:41</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * restTemplate 模板方式</span></span><br><span class="line"><span class="comment">     * 由SpringBoot web组件提供的 默认整合了Ribbon负载均衡器</span></span><br><span class="line"><span class="comment">     * rest 方式底层方式采用httpclient 技术</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * # 在SpringCloud 中有两种方式调用 rest fegin</span></span><br><span class="line"><span class="comment">     * 订单服务调用会员服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getOrder"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//有两种方式，一种是采用服务别名的方式调用  另一种是直接调用</span></span><br><span class="line">        String result = restTemplate.getForObject(<span class="string">"http://127.0.0.1:8000/getMember"</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">"订单服务调用会员服务result"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四步：配置启动类"><a href="#第四步：配置启动类" class="headerlink" title="第四步：配置启动类"></a>第四步：配置启动类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudeurekanember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaNemberApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@EnableEurekaClient</span> 将当前服务注册到eureka上</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaNemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五步：启动"><a href="#第五步：启动" class="headerlink" title="第五步：启动"></a>第五步：启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consider defining a bean of type <span class="string">'org.springframework.web.client.RestTemplate'</span> in your configuration.</span><br></pre></td></tr></table></figure><h3 id="启动报错："><a href="#启动报错：" class="headerlink" title="启动报错："></a>启动报错：</h3><p>解决RestTemplate找不到的原因 应该吧RestTemplate注册到SpringBoot容器中@Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在SpringCloudEurekaOrderApplication容器中加上如下代码：</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="/images/cloud/cloud2-4.png" alt="cloud2-4.png"></p><h2 id="第六步：调用服务"><a href="#第六步：调用服务" class="headerlink" title="第六步：调用服务"></a>第六步：调用服务</h2><p><img src="/images/cloud/cloud2-5.png" alt="cloud2-5.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;消费者（使用RestTemplate调用）&quot;&gt;&lt;a href=&quot;#消费者（使用RestTemplate调用）&quot; class=&quot;headerlink&quot; title=&quot;消费者（使用RestTemplate调用）&quot;&gt;&lt;/a&gt;消费者（使用RestTemplate调用）&lt;/h1&gt;&lt;p&gt;Eureka服务消费者&lt;br&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>3.搭建Eureka服务提供者</title>
    <link href="https://liyunlog0621.github.io/2018/12/29/cloud3/"/>
    <id>https://liyunlog0621.github.io/2018/12/29/cloud3/</id>
    <published>2018-12-29T07:06:59.000Z</published>
    <updated>2018-12-29T08:24:24.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h1><p>案例：实现会员服务(提供者) member 调用订单服务（消费者） order</p><p>Eureka服务提供者</p><a id="more"></a><h1 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h1><h2 id="第一步-配置prom文件"><a href="#第一步-配置prom文件" class="headerlink" title="第一步.配置prom文件"></a>第一步.配置prom文件</h2>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入wab依赖--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br><span class="line">     &lt;!--引入eureka客户端依赖--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">         &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="第二步：配置application-yml"><a href="#第二步：配置application-yml" class="headerlink" title="第二步：配置application.yml"></a>第二步：配置application.yml</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###会员项目的端口号</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8000</span></span><br><span class="line">### 服务的别名-服务注册到注册中心的名称</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: member</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      ### 当前会员服务注册到Eureka服务</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8100/eureka</span></span><br><span class="line">      ### 需要将我的服务注册到Eureka 上</span><br><span class="line">    register-with-eureka: <span class="keyword">true</span></span><br><span class="line">    ###需要检索服务</span><br><span class="line">    fetch-registry: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="第三步：增加服务接口"><a href="#第三步：增加服务接口" class="headerlink" title="第三步：增加服务接口"></a>第三步：增加服务接口</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.springcloudeurekanember.com.lyl.api.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassName MemberApiController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liyunlong</span></span><br><span class="line"><span class="comment"> * Data 下午 2:11</span></span><br><span class="line"><span class="comment"> * Version 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/getMember"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">geMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is member 我是会员服务！！！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四步：服务启动项配置"><a href="#第四步：服务启动项配置" class="headerlink" title="第四步：服务启动项配置"></a>第四步：服务启动项配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.lyl.springcloudeurekanember;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class SpringCloudEurekaNemberApplication &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @EnableEurekaClient 将当前服务注册到eureka上</span><br><span class="line">     * @param args</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaNemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第五步：启动"><a href="#第五步：启动" class="headerlink" title="第五步：启动"></a>第五步：启动</h2><p><img src="/images/cloud/cloud2-2.png" alt="cloud2-2.png"></p><h2 id="第六步：调用服务接口"><a href="#第六步：调用服务接口" class="headerlink" title="第六步：调用服务接口"></a>第六步：调用服务接口</h2><p><a href="http://yh-20161128lobl:8000/getMember" target="_blank" rel="noopener">http://yh-20161128lobl:8000/getMember</a><br><img src="/images/cloud/cloud2-3.png" alt="cloud2-3.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;案例说明&quot;&gt;&lt;a href=&quot;#案例说明&quot; class=&quot;headerlink&quot; title=&quot;案例说明&quot;&gt;&lt;/a&gt;案例说明&lt;/h1&gt;&lt;p&gt;案例：实现会员服务(提供者) member 调用订单服务（消费者） order&lt;/p&gt;
&lt;p&gt;Eureka服务提供者&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>1.Spring Cloud 基本概念理解</title>
    <link href="https://liyunlog0621.github.io/2018/12/28/cloud1/"/>
    <id>https://liyunlog0621.github.io/2018/12/28/cloud1/</id>
    <published>2018-12-28T11:51:55.000Z</published>
    <updated>2018-12-29T08:24:26.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h1><p> SpringCloud 是一套比较完整地微服务解决方案框架，不像其他Rpc远程调用框架，只能解决某个微服务中的问题，<br> 可以把SPringCloud 理解为一条龙微服务解决方案。在解决微服务的问题上比较完善。</p> <a id="more"></a><blockquote><ul><li>分布式配置中心<blockquote><ul><li>百度的diconf</li><li>Netfix的Archaius</li><li>360 的QConf</li><li>springCloud</li><li>携程的阿波罗</li></ul></blockquote></li><li>分布式锁</li><li>分布式跟踪<blockquote><ul><li>京东的hyra </li><li>springcloud的sleuth</li></ul></blockquote></li><li>分布式服务治理<blockquote><ul><li>阿里巴巴-Dubbo</li><li>当当网-Consul</li></ul></blockquote></li><li>分布式任务调度平台<blockquote><ul><li>xxl-job </li><li>elastic-job </li><li>springcloud 的task</li></ul></blockquote></li></ul></blockquote><h1 id="SpringCloud-子功能"><a href="#SpringCloud-子功能" class="headerlink" title="SpringCloud 子功能"></a>SpringCloud 子功能</h1><blockquote><ul><li>config  分布式配置中心</li><li>netfix 核心组件</li><li>Eureka: 服务治理 注册中心</li><li>Hystrix： 服务保护框架</li><li>Ribbon:客户端负载均衡器</li><li>Fegin:基于Ribbon和Hystrix的声明式服务调用组件</li><li>Zuul: 网关组件,提供智能路由，访问过滤等功能</li></ul></blockquote><h1 id="Spring-Eureka"><a href="#Spring-Eureka" class="headerlink" title="Spring Eureka"></a>Spring Eureka</h1><h3 id="1-服务注册与发现原理"><a href="#1-服务注册与发现原理" class="headerlink" title="1. 服务注册与发现原理"></a>1. 服务注册与发现原理</h3><pre><code>在任何Rpc远程服务框架中,都会有有个注册中心：存放服务地址相关信息（接口地址）。 支持：Eureka，Consul（go语言编写），ZookeeperDobbo支持两种Redis活Zookeeper服务提供者: 提供接口服务服务消费者：调用别人接口进行使用一个服务可以作为提供者也可以作为消费者eg： 提供者 ：服务启动的的时候会把当前基本服务比如服务地址和端口以别名的方式注册到注册中心上去。     消费者 :在调用接口的时候,使用服务的别名也就是提供者的别名去注册中心上获取实际Rpc远程调用地址。     如果消费者获取实际Rpc远程调用之后再使用本地HttpClient实际调用。首先会缓存在jvm内容中，默认情况下&apos;eureka&apos;每隔30秒更新一次服务调用地址     微服务负载均衡：本地负载均衡。</code></pre><blockquote><ul><li>服务注册：将服务信息注册到注册中心上</li><li>服务发现 ：从注册中心上获取服务信息。</li></ul></blockquote><h3 id="2-Eureka作为注册中心"><a href="#2-Eureka作为注册中心" class="headerlink" title="2.  Eureka作为注册中心"></a>2.  Eureka作为注册中心</h3><h3 id="3-搭建集群高可用Eureka注册中心"><a href="#3-搭建集群高可用Eureka注册中心" class="headerlink" title="3. 搭建集群高可用Eureka注册中心"></a>3. 搭建集群高可用Eureka注册中心</h3><h3 id="4-SpringCloud-Eureka2-0-闭源说明"><a href="#4-SpringCloud-Eureka2-0-闭源说明" class="headerlink" title="4. SpringCloud Eureka2.0 闭源说明"></a>4. SpringCloud Eureka2.0 闭源说明</h3><h3 id="5-Consul，Eureka，Zookeeper，Redis对比"><a href="#5-Consul，Eureka，Zookeeper，Redis对比" class="headerlink" title="5. Consul，Eureka，Zookeeper，Redis对比"></a>5. Consul，Eureka，Zookeeper，Redis对比</h3><h3 id="6-Consul注册中心环境搭建"><a href="#6-Consul注册中心环境搭建" class="headerlink" title="6. Consul注册中心环境搭建"></a>6. Consul注册中心环境搭建</h3><h3 id="7-SpringCloud使用Consul替代Eureka作为注册中心"><a href="#7-SpringCloud使用Consul替代Eureka作为注册中心" class="headerlink" title="7. SpringCloud使用Consul替代Eureka作为注册中心"></a>7. SpringCloud使用Consul替代Eureka作为注册中心</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloud&quot;&gt;&lt;a href=&quot;#SpringCloud&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud&quot;&gt;&lt;/a&gt;SpringCloud&lt;/h1&gt;&lt;p&gt; SpringCloud 是一套比较完整地微服务解决方案框架，不像其他Rpc远程调用框架，只能解决某个微服务中的问题，&lt;br&gt; 可以把SPringCloud 理解为一条龙微服务解决方案。在解决微服务的问题上比较完善。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>2.Eureka 创建注册中心</title>
    <link href="https://liyunlog0621.github.io/2018/12/28/cloud2/"/>
    <id>https://liyunlog0621.github.io/2018/12/28/cloud2/</id>
    <published>2018-12-28T11:51:55.000Z</published>
    <updated>2018-12-29T08:24:20.564Z</updated>
    
    <content type="html"><![CDATA[<p>Eureka 注册中心</p><a id="more"></a><h1 id="1-配置prom文件"><a href="#1-配置prom文件" class="headerlink" title="1. 配置prom文件"></a>1. 配置prom文件</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;version&gt;2.0.2.RELEASE&lt;/version&gt;--&gt;</span><br><span class="line">&lt;!--&lt;/dependency&gt;--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="3-yml-文件配置"><a href="#3-yml-文件配置" class="headerlink" title="3. yml 文件配置"></a>3. yml 文件配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">### 服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: <span class="number">8100</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">  ### 注册中心Ip地址</span><br><span class="line">    hostname: <span class="number">127.0</span>.0.1</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">  ### hostname</span><br><span class="line">      defaultZone: http:<span class="comment">//localhost:8100/eureka/</span></span><br><span class="line">  ### 因为自己是注册中心，是否需要将自己注册给自己的注册中心（集群的时候是需要为true）</span><br><span class="line">    register-with-eureka: <span class="keyword">false</span></span><br><span class="line">  ### 因为自己是注册中心，不需要检索服务信息</span><br><span class="line">    fetch-registry: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h1 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4.启动项目"></a>4.启动项目</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lylcloud.springcloudeurekaservcer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServcerApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@EnableEurekaServer</span> 表示开启EurekaServer服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaServcerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-启动之后"><a href="#5-启动之后" class="headerlink" title="5. 启动之后"></a>5. 启动之后</h1><p>访问 <a href="http://localhost:8100" target="_blank" rel="noopener">http://localhost:8100</a></p><p><img src="/images/cloud/cloud2-1.png" alt="cloud2-1.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Eureka 注册中心&lt;/p&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://liyunlog0621.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>消息系统</title>
    <link href="https://liyunlog0621.github.io/2018/12/28/Integration/"/>
    <id>https://liyunlog0621.github.io/2018/12/28/Integration/</id>
    <published>2018-12-28T08:52:46.000Z</published>
    <updated>2018-12-28T12:47:09.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Integeration-事件驱动架构"><a href="#Spring-Integeration-事件驱动架构" class="headerlink" title="Spring Integeration 事件驱动架构"></a>Spring Integeration 事件驱动架构</h1><blockquote><ul><li>事件通知：通过发送事件消息来通知其他</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Integeration-事件驱动架构&quot;&gt;&lt;a href=&quot;#Spring-Integeration-事件驱动架构&quot; class=&quot;headerlink&quot; title=&quot;Spring Integeration 事件驱动架构&quot;&gt;&lt;/a&gt;Spring I
      
    
    </summary>
    
    
      <category term="Spring Integration" scheme="https://liyunlog0621.github.io/tags/Spring-Integration/"/>
    
  </entry>
  
  <entry>
    <title>java8初识</title>
    <link href="https://liyunlog0621.github.io/2018/12/28/javalearn1/"/>
    <id>https://liyunlog0621.github.io/2018/12/28/javalearn1/</id>
    <published>2018-12-28T08:27:40.000Z</published>
    <updated>2018-12-28T08:51:14.179Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java8" scheme="https://liyunlog0621.github.io/categories/java8/"/>
    
    
      <category term="java8" scheme="https://liyunlog0621.github.io/tags/java8/"/>
    
  </entry>
  
</feed>
